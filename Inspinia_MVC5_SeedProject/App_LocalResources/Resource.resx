<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivationDateColHeader" xml:space="preserve">
    <value>Activation Date</value>
  </data>
  <data name="CancelBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreateHeaderInstProf" xml:space="preserve">
    <value>Create Instagram Profile</value>
  </data>
  <data name="CreateHeaderIpAddr" xml:space="preserve">
    <value>Create Ip Address</value>
  </data>
  <data name="CreateHeaderIpRange" xml:space="preserve">
    <value>Create Ip Range</value>
  </data>
  <data name="CreateHeaderTwitProf" xml:space="preserve">
    <value>Create Twitter Profile</value>
  </data>
  <data name="DeleteBtn" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteHeaderInstProf" xml:space="preserve">
    <value>Confirmation to Delete Instagram Profile</value>
  </data>
  <data name="DeleteHeaderIpAddr" xml:space="preserve">
    <value>Confirmation to Delete Ip Address</value>
  </data>
  <data name="DeleteHeaderIpRange" xml:space="preserve">
    <value>Confirmation to Delete Ip Range</value>
  </data>
  <data name="DeleteHeaderTwitProf" xml:space="preserve">
    <value>Confirmation to Delete Twitter Profile</value>
  </data>
  <data name="EditHeaderInstProf" xml:space="preserve">
    <value>Edit Instagram Profile</value>
  </data>
  <data name="EditHeaderIpAddr" xml:space="preserve">
    <value>Edit Ip Address</value>
  </data>
  <data name="EditHeaderIpRange" xml:space="preserve">
    <value>Edit Ip Range</value>
  </data>
  <data name="EditHeaderTwitProf" xml:space="preserve">
    <value>Edit Twitter Profile</value>
  </data>
  <data name="EntityBaseTitle" xml:space="preserve">
    <value>Assets</value>
  </data>
  <data name="IndexHeaderInstProf" xml:space="preserve">
    <value>Instagram Profiles</value>
  </data>
  <data name="IndexHeaderIpAddr" xml:space="preserve">
    <value>Ip Addresses</value>
  </data>
  <data name="IndexHeaderIpRange" xml:space="preserve">
    <value>Ip Ranges</value>
  </data>
  <data name="IndexHeaderTwitProf" xml:space="preserve">
    <value>Twitter Profiles</value>
  </data>
  <data name="IndexTablePropAction" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="IndexTablePropCreateNew" xml:space="preserve">
    <value>Create New</value>
  </data>
  <data name="InstagramProfile" xml:space="preserve">
    <value>Instagram Profile</value>
  </data>
  <data name="IpAddress" xml:space="preserve">
    <value>Ip Address</value>
  </data>
  <data name="IpValidCheck" xml:space="preserve">
    <value>Please enter a valid ip address (ex. 123.32.45.56)</value>
  </data>
  <data name="IpRange" xml:space="preserve">
    <value>Ip Range</value>
  </data>
  <data name="IpRangeLengthCheck" xml:space="preserve">
    <value>Please enter a valid ip range (i.e. between 0-32)</value>
  </data>
  <data name="IpRangeRequired" xml:space="preserve">
    <value>Ip range is required</value>
  </data>
  <data name="IpRequired" xml:space="preserve">
    <value>Ip address is required</value>
  </data>
  <data name="ModuleColumnHeader" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="PolicyTableTitle" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="PolicyTitle" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="ProfileId" xml:space="preserve">
    <value>Profile Id</value>
  </data>
  <data name="ProfileIdRequired" xml:space="preserve">
    <value>Profile id is required</value>
  </data>
  <data name="SaveBtn" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Schedule1" xml:space="preserve">
    <value>Once every &lt;b&gt;{0}&lt;/b&gt;</value>
  </data>
  <data name="Schedule1Between" xml:space="preserve">
    <value>Once  every &lt;b&gt;{0}&lt;/b&gt; between &lt;b&gt;{1}&lt;/b&gt; and &lt;b&gt;{2}&lt;/b&gt; hours</value>
  </data>
  <data name="ScheduleColumnHeader" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="ScheduleDay" xml:space="preserve">
    <value>day(s)</value>
  </data>
  <data name="ScheduleHour" xml:space="preserve">
    <value>hour(s)</value>
  </data>
  <data name="ScheduleMinute" xml:space="preserve">
    <value>minute(s)</value>
  </data>
  <data name="ScheduleMonth" xml:space="preserve">
    <value>month(s)</value>
  </data>
  <data name="ScheduleMore" xml:space="preserve">
    <value>Once every &lt;b&gt;{0} {1}&lt;/b&gt;</value>
  </data>
  <data name="ScheduleMoreBetween" xml:space="preserve">
    <value>Once every &lt;b&gt;{0} {1}&lt;/b&gt; between &lt;b&gt;{2}&lt;/b&gt; and &lt;b&gt;{3}&lt;/b&gt; hours</value>
  </data>
  <data name="ScheduleWeek" xml:space="preserve">
    <value>week(s)</value>
  </data>
  <data name="SettingsChooseYourLanguage" xml:space="preserve">
    <value>Choose Your Language</value>
  </data>
  <data name="SocNetSearchStr" xml:space="preserve">
    <value>String to Search</value>
  </data>
  <data name="SocNetSearchStrRequired" xml:space="preserve">
    <value>String to search is required</value>
  </data>
  <data name="StatusColHeader" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="TwitterProfile" xml:space="preserve">
    <value>Twitter Profile</value>
  </data>
  <data name="UpdateBtn" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="IP" xml:space="preserve">
    <value>IP</value>
  </data>
  <data name="ModuleName1" xml:space="preserve">
    <value>Service and systems availability checker module</value>
  </data>
  <data name="ModuleName2" xml:space="preserve">
    <value>Twitter activity checker module</value>
  </data>
  <data name="ModuleName3" xml:space="preserve">
    <value>Instagram activity checker module</value>
  </data>
  <data name="PolicyCreateTitle" xml:space="preserve">
    <value>Create Policy</value>
  </data>
  <data name="PolicyEditTitle" xml:space="preserve">
    <value>Edit Policy</value>
  </data>
  <data name="PolicyDeleteTitle" xml:space="preserve">
    <value>Confirmation to Delete Policy</value>
  </data>
  <data name="PolicyStatusActive" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="PolicyStatusInactive" xml:space="preserve">
    <value>Inactive</value>
  </data>
  <data name="PolicyStep1" xml:space="preserve">
    <value>First Step</value>
  </data>
  <data name="PolicyStep2" xml:space="preserve">
    <value>Second Step</value>
  </data>
  <data name="PolicyStep3" xml:space="preserve">
    <value>Third Step</value>
  </data>
  <data name="PolicyStepFollow" xml:space="preserve">
    <value>Please follow steps...</value>
  </data>
  <data name="PolicySelectModuleInfo" xml:space="preserve">
    <value>Select a module for policy</value>
  </data>
  <data name="PolicySelectIpInfo" xml:space="preserve">
    <value>Select ip / ip range for policy</value>
  </data>
  <data name="PolicySelectTwitterInfo" xml:space="preserve">
    <value>Select twitter profile(s) for policy</value>
  </data>
  <data name="PolicySelectInstagramInfo" xml:space="preserve">
    <value>Select instagram profile(s) for policy</value>
  </data>
  <data name="PolicySelectIpCol" xml:space="preserve">
    <value>Ip address assets</value>
  </data>
  <data name="PolicySelectIpRangeCol" xml:space="preserve">
    <value>Ip range assets</value>
  </data>
  <data name="PolicyDefineScheduleInfo" xml:space="preserve">
    <value>Define a schedule period</value>
  </data>
  <data name="PolicyScheduleDayInfo" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="PolicyScheduleHourInfo" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="PolicyScheduleMonthInfo" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="PolicyScheduleWeekInfo" xml:space="preserve">
    <value>Week</value>
  </data>
  <data name="PolicyScheduleMinuteInfo" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="PolicySchedulePeriod" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="PolicyScheduleStartAt" xml:space="preserve">
    <value>Start at</value>
  </data>
  <data name="PolicyScheduleFinishAt" xml:space="preserve">
    <value>Finish at</value>
  </data>
  <data name="PolicySelectEntityInfo" xml:space="preserve">
    <value>Select at least an asset</value>
  </data>
  <data name="PolicyFillAllFields" xml:space="preserve">
    <value>Fill all necessary fields!</value>
  </data>
  <data name="SettingsTitle" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="ScheduleStartValueCheck" xml:space="preserve">
    <value>Please enter a start hour between 0-23</value>
  </data>
  <data name="ScheduleFinishValueCheck" xml:space="preserve">
    <value>Please enter a finish hour between 0-23</value>
  </data>
  <data name="SchedulePeriodValueCheck" xml:space="preserve">
    <value>Please enter a period between 1-100</value>
  </data>
  <data name="SchedulePeriodRequired" xml:space="preserve">
    <value>Period value is required</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
</root>